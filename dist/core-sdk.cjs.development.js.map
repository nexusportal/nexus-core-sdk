{"version":3,"file":"core-sdk.cjs.development.js","sources":["../src/enums/ChainId.ts","../src/enums/ChainKey.ts","../src/enums/Rounding.ts","../src/enums/SolidityType.ts","../src/enums/TradeType.ts","../src/enums/TradeVersion.ts","../src/constants/addresses.ts","../src/constants/chain.ts","../src/constants/legacy.ts","../src/entities/AbstractCurrency.ts","../src/entities/NativeCurrency.ts","../src/functions/validateAndParseAddress.ts","../src/entities/Token.ts","../src/constants/tokens.ts","../src/entities/Native/Avalanche.ts","../src/entities/Native/Binance.ts","../src/entities/Native/Celo.ts","../src/entities/Native/Ether.ts","../src/entities/Native/Fantom.ts","../src/entities/Native/Harmony.ts","../src/entities/Native/Heco.ts","../src/entities/Native/Matic.ts","../src/entities/Native/Movr.ts","../src/entities/Native/Okex.ts","../src/entities/Native/xDai.ts","../src/entities/Native/Palm.ts","../src/entities/Native/Fuse.ts","../src/entities/Native/Songbird.ts","../src/entities/Native/EXRP.ts","../src/entities/Native/Apothem.ts","../src/entities/Native/Xdc.ts","../src/constants/natives.ts","../src/constants/numbers.ts","../src/constants/solidity.ts","../src/errors.ts","../src/entities/Fraction.ts","../src/entities/CurrencyAmount.ts","../src/entities/Price.ts","../src/functions/computePairAddress.ts","../src/functions/math.ts","../src/entities/Pair.ts","../src/entities/Percent.ts","../src/entities/Route.ts","../src/functions/computePriceImpact.ts","../src/functions/sortedInsert.ts","../src/entities/Trade.ts","../src/functions/contract.ts","../src/functions/rebase.ts","../src/functions/validateSolidityTypeInstance.ts","../src/router.ts"],"sourcesContent":["export enum ChainId {\n  ETHEREUM = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÖRLI = 5,\n  KOVAN = 42,\n  MATIC = 137,\n  MATIC_TESTNET = 80001,\n  FANTOM = 250,\n  FANTOM_TESTNET = 4002,\n  XDAI = 100,\n  BSC = 56,\n  BSC_TESTNET = 97,\n  ARBITRUM = 42161,\n  ARBITRUM_TESTNET = 79377087078960,\n  MOONBEAM_TESTNET = 1287,\n  AVALANCHE = 43114,\n  AVALANCHE_TESTNET = 43113,\n  HECO = 128,\n  HECO_TESTNET = 256,\n  HARMONY = 1666600000,\n  HARMONY_TESTNET = 1666700000,\n  OKEX = 66,\n  OKEX_TESTNET = 65,\n  CELO = 42220,\n  PALM = 11297108109,\n  PALM_TESTNET = 11297108099,\n  MOONRIVER = 1285,\n  FUSE = 122,\n  TELOS = 40,\n  XRPL = 1440000,\n  XDC = 50,\n  APOTHEM = 51,\n}\n","export enum ChainKey {\n  ARBITRUM = 'arbitrum',\n  ARBITRUM_TESTNET = 'arbitrum-testnet',\n  AVALANCHE = 'avalanche',\n  AVALANCHE_TESTNET = 'avalance-testnet',\n  BSC = 'bsc',\n  BSC_TESTNET = 'bsc-testnet',\n  CELO = 'celo',\n  ETHEREUM = 'ethereum',\n  FANTOM = 'fantom',\n  FANTOM_TESTNET = 'fantom-testnet',\n  FUSE = 'fuse',\n  GÖRLI = 'goerli',\n  HARMONY = 'harmony',\n  HARMONY_TESTNET = 'harmony-testnet',\n  HECO = 'heco',\n  HECO_TESTNET = 'heco-testnet',\n  KOVAN = 'kovan',\n  ROPSTEN = 'ropsten',\n  MATIC = 'polygon',\n  MATIC_TESTNET = 'matic-testnet',\n  MOONBEAM_TESTNET = 'moonbeam-testnet',\n  MOONRIVER = 'moonriver',\n  OKEX = 'okex',\n  OKEX_TESTNET = 'okex-testnet',\n  PALM = 'palm',\n  PALM_TESTNET = 'palm-testnet',\n  RINKEBY = 'rinkeby',\n  TELOS = 'telos',\n  XDAI = 'xdai',\n  XRPL = 'ripple',\n  XDC = 'xdc',\n  APOTHEM = 'apothem',\n}\n","export enum Rounding {\n  ROUND_DOWN = 0,\n  ROUND_HALF_UP = 1,\n  ROUND_UP = 3,\n}\n","export enum SolidityType {\n    uint8 = 'uint8',\n    uint256 = 'uint256',\n}","export enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT,\n}\n","export enum TradeVersion {\n  V2TRADE,\n  V3TRADE,\n}\n","import { AddressMap } from '../types'\nimport { ChainId } from '../enums'\n\nexport const SUSHI_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0x44aA8b2f3d15200Cbc05bA9B6d9c20423Ba6810E',\n  [ChainId.ROPSTEN]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.RINKEBY]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.GÖRLI]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.KOVAN]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.FANTOM]: '0xae75A438b2E0cB8Bb01Ec1E1e376De11D44477CC',\n  [ChainId.MATIC]: '0x0b3F868E0BE5597D5DB7fEB59E1CADBb0fdDa50a',\n  [ChainId.XDAI]: '0x2995D1317DcD4f0aB89f4AE60F3f020A4F17C7CE',\n  [ChainId.BSC]: '0x947950BcC74888a40Ffa2593C5798F11Fc9124C4',\n  [ChainId.ARBITRUM]: '0xd4d42F0b6DEF4CE0383636770eF773390d85c61A',\n  [ChainId.AVALANCHE]: '0x39cf1BD5f15fb22eC3D9Ff86b0727aFc203427cc',\n  [ChainId.HECO]: '0x52E00B2dA5Bd7940fFe26B609A42F957f31118D5',\n  [ChainId.HARMONY]: '0xBEC775Cb42AbFa4288dE81F387a9b1A3c4Bc552A',\n  [ChainId.OKEX]: '0x2218E0D5E0173769F5b4939a3aE423f7e5E4EAB7',\n  [ChainId.OKEX_TESTNET]: '',\n  [ChainId.CELO]: '0xD15EC721C2A896512Ad29C671997DD68f9593226',\n  [ChainId.PALM]: '',\n  [ChainId.PALM_TESTNET]: '',\n  [ChainId.MOONRIVER]: '0xf390830DF829cf22c53c8840554B98eafC5dCBc2',\n  [ChainId.TELOS]: '0x922D641a426DcFFaeF11680e5358F34d97d112E1',\n  [ChainId.XRPL]: '0xE268aDBDBAEC092C3822dCc00b47CBCE58A9E49e',\n  [ChainId.XDC]: '0x6DaF228391e388B05BBc682FEA3CB1Cc3E38c44E',\n  [ChainId.APOTHEM]: '0x997B6116f9Ec280E39C196D797b42eFA3E76B0F4',\n}\n\nexport const USDC_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',\n  [ChainId.ROPSTEN]: '0x0D9C8723B343A8368BebE0B5E89273fF8D712e3C',\n  [ChainId.KOVAN]: '0xb7a4F3E9097C08dA09517b5aB877F7a917224ede',\n  [ChainId.MATIC]: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\n  [ChainId.FANTOM]: '0x04068DA6C83AFCFA0e13ba15A6696662335D5B75',\n  [ChainId.BSC]: '0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d',\n  [ChainId.HARMONY]: '0x985458E523dB3d53125813eD68c274899e9DfAb4',\n  [ChainId.HECO]: '0x9362Bbef4B8313A8Aa9f0c9808B80577Aa26B73B',\n  [ChainId.OKEX]: '0xc946DAf81b08146B1C7A8Da2A851Ddf2B3EAaf85',\n  [ChainId.XDAI]: '0xDDAfbb505ad214D7b80b1f830fcCc89B60fb7A83',\n  [ChainId.ARBITRUM]: '0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8',\n  [ChainId.AVALANCHE]: '0xA7D7079b0FEaD91F3e65f86E8915Cb59c1a4C664',\n  [ChainId.MOONRIVER]: '0xE3F5a90F9cb311505cd691a46596599aA1A0AD7D',\n}\n\nexport const USD_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: USDC_ADDRESS[ChainId.ETHEREUM],\n  [ChainId.ROPSTEN]: USDC_ADDRESS[ChainId.ROPSTEN],\n  [ChainId.KOVAN]: USDC_ADDRESS[ChainId.KOVAN],\n  [ChainId.MATIC]: USDC_ADDRESS[ChainId.MATIC],\n  [ChainId.FANTOM]: USDC_ADDRESS[ChainId.FANTOM],\n  [ChainId.BSC]: USDC_ADDRESS[ChainId.BSC],\n  [ChainId.HARMONY]: USDC_ADDRESS[ChainId.HARMONY],\n  [ChainId.HECO]: USDC_ADDRESS[ChainId.HECO],\n  [ChainId.OKEX]: USDC_ADDRESS[ChainId.OKEX],\n  [ChainId.XDAI]: USDC_ADDRESS[ChainId.XDAI],\n  [ChainId.ARBITRUM]: USDC_ADDRESS[ChainId.ARBITRUM],\n  [ChainId.AVALANCHE]: USDC_ADDRESS[ChainId.AVALANCHE],\n  [ChainId.MOONRIVER]: USDC_ADDRESS[ChainId.MOONRIVER],\n  [ChainId.CELO]: '0x765DE816845861e75A25fCA122bb6898B8B1282a',\n}\n\nexport const WETH9_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n  [ChainId.ROPSTEN]: '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n  [ChainId.RINKEBY]: '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n  [ChainId.GÖRLI]: '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6',\n  [ChainId.KOVAN]: '0xd0A1E359811322d97991E03f863a0C30C2cF029C',\n  [ChainId.ARBITRUM]: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n  [ChainId.ARBITRUM_TESTNET]: '0xf8456e5e6A225C2C1D74D8C9a4cB2B1d5dc1153b',\n  [ChainId.BSC]: '0x2170Ed0880ac9A755fd29B2688956BD959F933F8',\n  [ChainId.FANTOM]: '0x74b23882a30290451A17c44f4F05243b6b58C76d',\n  [ChainId.MATIC]: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',\n  [ChainId.OKEX]: '0x2170Ed0880ac9A755fd29B2688956BD959F933F8',\n  [ChainId.HECO]: '0x64FF637fB478863B7468bc97D30a5bF3A428a1fD',\n  [ChainId.HARMONY]: '0x6983D1E6DEf3690C4d616b13597A09e6193EA013',\n  [ChainId.XDAI]: '0x6A023CCd1ff6F2045C3309768eAd9E68F978f6e1',\n  [ChainId.AVALANCHE]: '0x49D5c2BdFfac6CE2BFdB6640F4F80f226bc10bAB',\n  [ChainId.PALM]: '0x726138359C17F1E56bA8c4F737a7CAf724F6010b',\n  [ChainId.CELO]: '0xE919F65739c26a42616b7b8eedC6b5524d1e3aC4',\n  [ChainId.MOONRIVER]: '0x639A647fbe20b6c8ac19E48E2de44ea792c62c5C',\n  [ChainId.XRPL]: '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE',\n  [ChainId.XDC]: '0x951857744785E80e2De051c32EE7b25f9c458C42',\n  [ChainId.APOTHEM]: '0xF686c5A86d3AE6182E0E015b411BD01cD8b06662',\n}\n\nexport const WNATIVE_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: WETH9_ADDRESS[ChainId.ETHEREUM],\n  [ChainId.ROPSTEN]: WETH9_ADDRESS[ChainId.ROPSTEN],\n  [ChainId.RINKEBY]: WETH9_ADDRESS[ChainId.RINKEBY],\n  [ChainId.GÖRLI]: WETH9_ADDRESS[ChainId.GÖRLI],\n  [ChainId.KOVAN]: WETH9_ADDRESS[ChainId.KOVAN],\n  [ChainId.ARBITRUM]: WETH9_ADDRESS[ChainId.ARBITRUM],\n  [ChainId.ARBITRUM_TESTNET]: WETH9_ADDRESS[ChainId.ARBITRUM_TESTNET],\n  [ChainId.FANTOM]: '0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83',\n  [ChainId.FANTOM_TESTNET]: '0xf1277d1Ed8AD466beddF92ef448A132661956621',\n  [ChainId.MATIC]: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n  [ChainId.MATIC_TESTNET]: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n  [ChainId.XDAI]: '0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d',\n  [ChainId.BSC]: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n  [ChainId.BSC_TESTNET]: '0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd',\n  [ChainId.MOONBEAM_TESTNET]: '0x372d0695E75563D9180F8CE31c9924D7e8aaac47',\n  [ChainId.AVALANCHE]: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n  [ChainId.AVALANCHE_TESTNET]: '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\n  [ChainId.HECO]: '0x5545153CCFcA01fbd7Dd11C0b23ba694D9509A6F',\n  [ChainId.HECO_TESTNET]: '0x5B2DA6F42CA09C77D577a12BeaD0446148830687',\n  [ChainId.HARMONY]: '0xcF664087a5bB0237a0BAd6742852ec6c8d69A27a',\n  [ChainId.HARMONY_TESTNET]: '0x7a2afac38517d512E55C0bCe3b6805c10a04D60F',\n  [ChainId.OKEX]: '0x8F8526dbfd6E38E3D8307702cA8469Bae6C56C15',\n  [ChainId.OKEX_TESTNET]: '0x2219845942d28716c0F7C605765fABDcA1a7d9E0',\n  [ChainId.CELO]: '0x471EcE3750Da237f93B8E339c536989b8978a438',\n  [ChainId.PALM]: '0xF98cABF0a963452C5536330408B2590567611a71',\n  [ChainId.MOONRIVER]: '0xf50225a84382c74CbdeA10b0c176f71fc3DE0C4d',\n  [ChainId.FUSE]: '0x0BE9e53fd7EDaC9F859882AfdDa116645287C629',\n  [ChainId.TELOS]: '0xD102cE6A4dB07D247fcc28F366A623Df0938CA9E',\n  [ChainId.XRPL]: WETH9_ADDRESS[ChainId.XRPL],\n  [ChainId.XDC]: WETH9_ADDRESS[ChainId.XDC],\n  [ChainId.APOTHEM]: WETH9_ADDRESS[ChainId.APOTHEM],\n}\n\nexport const DAI_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0x6B175474E89094C44Da98b954EedeAC495271d0F',\n  [ChainId.ROPSTEN]: '0xc2118d4d90b274016cB7a54c03EF52E6c537D957',\n  [ChainId.KOVAN]: '0x4F96Fe3b7A6Cf9725f59d353F723c1bDb64CA6Aa',\n  [ChainId.MATIC]: '0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063',\n  [ChainId.FANTOM]: '0x8D11eC38a3EB5E956B052f67Da8Bdc9bef8Abf3E',\n  [ChainId.BSC]: '0x1AF3F329e8BE154074D8769D1FFa4eE058B1DBc3',\n  [ChainId.HARMONY]: '0xEf977d2f931C1978Db5F6747666fa1eACB0d0339',\n  [ChainId.HECO]: '0x3D760a45D0887DFD89A2F5385a236B29Cb46ED2a',\n  [ChainId.OKEX]: '0x21cDE7E32a6CAF4742d00d44B07279e7596d26B9',\n  [ChainId.XDAI]: '0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d',\n  [ChainId.ARBITRUM]: '0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1',\n  [ChainId.AVALANCHE]: '0xd586E7F844cEa2F87f50152665BCbc2C279D8d70',\n}\n\nexport const USDT_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0xdAC17F958D2ee523a2206206994597C13D831ec7',\n  [ChainId.ROPSTEN]: '0x110a13FC3efE6A245B50102D2d79B3E76125Ae83',\n  [ChainId.KOVAN]: '0x07de306FF27a2B630B1141956844eB1552B956B5',\n  [ChainId.MATIC]: '0xc2132D05D31c914a87C6611C10748AEb04B58e8F',\n  [ChainId.FANTOM]: '0x049d68029688eAbF473097a2fC38ef61633A3C7A',\n  [ChainId.BSC]: '0x55d398326f99059fF775485246999027B3197955',\n  [ChainId.HARMONY]: '0x3C2B8Be99c50593081EAA2A724F0B8285F5aba8f',\n  [ChainId.HECO]: '0xa71EdC38d189767582C38A3145b5873052c3e47a',\n  [ChainId.OKEX]: '0x382bB369d343125BfB2117af9c149795C6C65C50',\n  [ChainId.XDAI]: '0x4ECaBa5870353805a9F068101A40E0f32ed605C6',\n  [ChainId.ARBITRUM]: '0xFd086bC7CD5C481DCC9C85ebE478A1C0b69FCbb9',\n  [ChainId.AVALANCHE]: '0xc7198437980c041c805A1EDcbA50c1Ce5db95118',\n}\n\nexport const FACTORY_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0x3DC45C2f0bcEE7b9D664B8E802d8813824F261eA',\n  [ChainId.ROPSTEN]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.RINKEBY]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.GÖRLI]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.KOVAN]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.FANTOM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.MATIC_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.XDAI]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.BSC]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.BSC_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.ARBITRUM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.ARBITRUM_TESTNET]: '',\n  [ChainId.MOONBEAM_TESTNET]: '0x2Ce3F07dD4c62b56a502E223A7cBE38b1d77A1b5',\n  [ChainId.AVALANCHE]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.AVALANCHE_TESTNET]: '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\n  [ChainId.HECO]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.HECO_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.HARMONY]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.HARMONY_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.OKEX]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.OKEX_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.CELO]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.PALM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.PALM_TESTNET]: '',\n  [ChainId.MOONRIVER]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.FUSE]: '0x43eA90e2b786728520e4f930d2A71a477BF2737C',\n  [ChainId.XRPL]: '0x357444526Cd173b29290Da615cC5FcDEf2c4E3c0',\n  [ChainId.APOTHEM]: '0xAa61D56bDfAaF6ff7125caa3bf5cb53698e3d9c6',\n  [ChainId.XDC]: '0xAf2977827a72e3CfE18104b0EDAF61Dd0689cd31',\n\n}\n\nexport const ROUTER_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0x7D3a49BC818e6f734d14DBD8e4834bf8F6E7De91',\n  [ChainId.RINKEBY]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.ROPSTEN]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.GÖRLI]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.KOVAN]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.FANTOM]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.MATIC_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.XDAI]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.BSC]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.BSC_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.ARBITRUM]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.ARBITRUM_TESTNET]: '',\n  [ChainId.MOONBEAM_TESTNET]: '0xeB5c2BB5E83B51d83F3534Ae21E84336B8B376ef',\n  [ChainId.AVALANCHE]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.AVALANCHE_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.HECO]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.HECO_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.HARMONY]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.HARMONY_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.OKEX]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.OKEX_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.CELO]: '0x1421bDe4B10e8dd459b3BCb598810B1337D56842',\n  [ChainId.PALM]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.PALM_TESTNET]: '',\n  [ChainId.MOONRIVER]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.FUSE]: '0xF4d73326C13a4Fc5FD7A064217e12780e9Bd62c3',\n  [ChainId.XRPL]: '0x008CBe6822a86dED47fEF93f628F1a653B3012Ef',\n  [ChainId.XDC]: '0x12f523A693cC1614b8a04f62362f0F2c1b15dBA7',\n  [ChainId.APOTHEM]: '0xA07C07943bca3B237f23ceCd41D162d84925427e',\n\n}\n\nexport const MASTERCHEF_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0xe462159E624FfcC0f2a0EC8F37402A2CF703Fc83',\n  [ChainId.ROPSTEN]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  [ChainId.RINKEBY]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  [ChainId.GÖRLI]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  [ChainId.KOVAN]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  [ChainId.XRPL]: '0xc1cF84De273f1CD9Cec49b2aAae0F23a2AeEDd17',\n  [ChainId.APOTHEM]: '0xdE6e71E23eD53d2151687a8e2F6040c1E5D2D7cb',\n  [ChainId.XDC]: '0x8701Ce4b2b3a90684eb184857Fc2ea3F09Da1d07',\n}\n\nexport const BAR_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0x74Fed49d2B3301630B37c05bcDe498704Aed0be9',\n  [ChainId.ROPSTEN]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\n  [ChainId.RINKEBY]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\n  [ChainId.GÖRLI]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\n  [ChainId.KOVAN]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\n}\n\nexport const MAKER_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0x9F9763214A05730a93cF8223421beE209b3174E7',\n  [ChainId.ROPSTEN]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\n  [ChainId.RINKEBY]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\n  [ChainId.GÖRLI]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\n  [ChainId.KOVAN]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\n}\n\nexport const TIMELOCK_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0x9a8541Ddf3a932a9A922B607e9CF7301f1d47bD1',\n}\n\nexport const BENTOBOX_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.ROPSTEN]: '0x6BdD85290001C8Aef74f35A7606065FA15aD5ACF',\n  [ChainId.RINKEBY]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.GÖRLI]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.KOVAN]: '0xc381a85ed7C7448Da073b7d6C9d4cBf1Cbf576f0',\n  [ChainId.FANTOM]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.MATIC]: '0x0319000133d3AdA02600f0875d2cf03D442C3367',\n  [ChainId.MATIC_TESTNET]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.XDAI]: '0xE2d7F5dd869Fc7c126D21b13a9080e75a4bDb324',\n  [ChainId.BSC]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.BSC_TESTNET]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.ARBITRUM]: '0x74c764D41B77DBbb4fe771daB1939B00b146894A',\n  [ChainId.AVALANCHE]: '0x0711B6026068f736bae6B213031fCE978D48E026',\n  [ChainId.HECO]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.CELO]: '0x0711B6026068f736bae6B213031fCE978D48E026',\n  [ChainId.HARMONY]: '0xA28cfF72b04f83A7E3f912e6ad34d5537708a2C2',\n}\n\nexport const KASHI_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\n  [ChainId.KOVAN]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\n  [ChainId.MATIC]: '0xB527C5295c4Bc348cBb3a2E96B2494fD292075a7',\n  [ChainId.XDAI]: '0x7a6DA9903d0a481F40b8336c1463487BC8C0407e',\n  [ChainId.BSC]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\n  [ChainId.ARBITRUM]: '0xa010eE0226cd071BeBd8919A1F675cAE1f1f5D3e',\n  [ChainId.AVALANCHE]: '0x513037395FA0C9c35E41f89189ceDfE3bD42fAdb',\n  [ChainId.AVALANCHE_TESTNET]: '',\n  [ChainId.HECO]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\n}\n\nexport const SUSHISWAP_SWAPPER_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0x1766733112408b95239aD1951925567CB1203084',\n  [ChainId.MATIC]: '0xe9589382130Ded5DF2397E2fD7A3E9b41DD2701D',\n  [ChainId.XDAI]: '0xE02BDb31C353CE95A1D74F81C93eEa70Bf7371B9',\n  [ChainId.BSC]: '0x1766733112408b95239aD1951925567CB1203084',\n  [ChainId.ARBITRUM]: '0x0bFcD5dD76218bF9e3BE8A1055f9e6D27E5745eb',\n  [ChainId.AVALANCHE]: '0x062eee8B38ab5E8ee3bc58CE505939db53E63785',\n  [ChainId.HECO]: '0x1766733112408b95239aD1951925567CB1203084',\n}\n\nexport const SUSHISWAP_MULTISWAPPER_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0x545820d5Cc05248da112419fEfb18522c63C8e12',\n  [ChainId.KOVAN]: '0xc0c1649b2c67f1a9f5ff1dd618188165e2555bcf',\n  [ChainId.MATIC]: '0x73BE093B84c773fe8eE0f76DDc0829E45c215415',\n  [ChainId.XDAI]: '0x735f0FbEb3b6389986BcaAf073Af07D2F8be2b93',\n  [ChainId.BSC]: '0x86c655cAc122e9A2fd9Ae1f79Df27b30E357968c',\n  [ChainId.ARBITRUM]: '0xbe7D5968296843756109D42946D01195320922EF',\n  [ChainId.AVALANCHE]: '0xB7C8b5BFcd7212f034Be42a2aAb08b8773B76920',\n}\n\nexport const SUSHISWAP_MULTI_EXACT_SWAPPER_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0xB527C5295c4Bc348cBb3a2E96B2494fD292075a7',\n  [ChainId.KOVAN]: '0x75AE0Aa596D39b20addC921DeB5EE3c96279dABE',\n  [ChainId.MATIC]: '0xDB6C4EDd9545d3b815dA85E6429B699c418886f9',\n  [ChainId.XDAI]: '0x07b6e34EeCF38B02e83b6B4702699717e298967E',\n  [ChainId.BSC]: '0x1B16149Edaf1EFa6ADE6aEEF33e63C6e08c9bB1B',\n  [ChainId.ARBITRUM]: '0x860D841bfD1cfEf72A14B2b734005799F07dC7ED',\n  [ChainId.AVALANCHE]: '0x2c46217Fae90D302d1Fb5467ADA504bC2A84f448',\n}\n\nexport const PEGGED_ORACLE_ADDRESS = '0x6cbfbB38498Df0E1e7A4506593cDB02db9001564'\n\nexport const SUSHISWAP_TWAP_0_ORACLE_ADDRESS = '0x66F03B0d30838A3fee971928627ea6F59B236065'\n\nexport const SUSHISWAP_TWAP_1_ORACLE_ADDRESS = '0x0D51b575591F8f74a2763Ade75D3CDCf6789266f'\n\nexport const CHAINLINK_ORACLE_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\n  [ChainId.MATIC]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\n  [ChainId.XDAI]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\n  [ChainId.BSC]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\n  [ChainId.ARBITRUM]: '0xB2B5C26B6868be10fF77e4E233fD231ceB90162a',\n  [ChainId.AVALANCHE]: '0x43198B6fA5d89B88D2E072fA4841724571De5A59',\n}\n\nexport const BORING_HELPER_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\n  [ChainId.KOVAN]: '0x5bd6e4eFA335192FDA5D6B42a344ccA3d45894B8',\n  [ChainId.MATIC]: '0xA77a7fD5a16237B85E0FAd02C51f459D18AE93Cd',\n  [ChainId.XDAI]: '0x97e4a0fb71243A83A6FbaEF7Cf73617594e4cF2F',\n  [ChainId.BSC]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\n  [ChainId.ARBITRUM]: '0x9AF28d4f7Fa007686958c306BD4c8c52c2b615b8',\n  [ChainId.AVALANCHE]: '0xD18cA07a599bf5eBb9B7327871ad682F0b660748',\n  [ChainId.HECO]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\n}\n\nexport const MINICHEF_ADDRESS: AddressMap = {\n  [ChainId.MATIC]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.XDAI]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\n  [ChainId.HARMONY]: '0x67dA5f2FfaDDfF067AB9d5F025F8810634d84287',\n  [ChainId.ARBITRUM]: '0xF4d73326C13a4Fc5FD7A064217e12780e9Bd62c3',\n}\n\nexport const MASTERCHEF_V2_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0xEF0881eC094552b2e128Cf945EF17a6752B4Ec5d',\n}\n\nexport const ENS_REGISTRAR_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n  [ChainId.GÖRLI]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n  [ChainId.ROPSTEN]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n  [ChainId.RINKEBY]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n}\n\nexport const ZAPPER_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0xcff6eF0B9916682B37D80c19cFF8949bc1886bC2',\n  [ChainId.ROPSTEN]: '0xcff6eF0B9916682B37D80c19cFF8949bc1886bC2',\n}\n\nexport const MERKLE_DISTRIBUTOR_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0xcBE6B83e77cdc011Cc18F6f0Df8444E5783ed982',\n  [ChainId.ROPSTEN]: '0x84d1f7202e0e7dac211617017ca72a2cb5e2b955',\n}\n\nexport const MULTICALL2_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\n  [ChainId.ROPSTEN]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\n  [ChainId.RINKEBY]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\n  [ChainId.GÖRLI]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\n  [ChainId.KOVAN]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\n  [ChainId.ARBITRUM]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  [ChainId.ARBITRUM_TESTNET]: '0xa501c031958F579dB7676fF1CE78AD305794d579',\n  [ChainId.CELO]: '0x9aac9048fC8139667D6a2597B902865bfdc225d3',\n  [ChainId.FANTOM]: '0x22D4cF72C45F8198CfbF4B568dBdB5A85e8DC0B5',\n  [ChainId.MATIC]: '0x02817C1e3543c2d908a590F5dB6bc97f933dB4BD',\n  [ChainId.XDAI]: '0x67dA5f2FfaDDfF067AB9d5F025F8810634d84287',\n  [ChainId.BSC]: '0xa9193376D09C7f31283C54e56D013fCF370Cd9D9',\n  [ChainId.AVALANCHE]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\n  [ChainId.HECO]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\n  [ChainId.HARMONY]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\n  [ChainId.OKEX]: '0xF4d73326C13a4Fc5FD7A064217e12780e9Bd62c3',\n  [ChainId.PALM]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.MOONRIVER]: '0x270f2F35bED92B7A59eA5F08F6B3fd34c8D9D9b5',\n  [ChainId.FUSE]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.TELOS]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\n  [ChainId.XRPL]: '0x5a73a8e6227668385b6244F2EC487a8Deac2E9E0',\n  [ChainId.XDC]: '0x62CDD8ED1d7cB26E512C49229Ef02Bcb8cc5007b',\n  [ChainId.APOTHEM]: '0x25E6b0743B7D773CDc53E7f0431A8E143e1D1Ab9',\n}\n\nexport const BALANCE_FETCHER_ADDRESS: AddressMap = {\n  [ChainId.ETHEREUM]: '0x386a4B75578C7843A6082EFe181D5d629236C047',\n  [ChainId.MATIC]: '0x06a846BA430Ed005bE60f8598B4C563dbaa6feF0',\n  [ChainId.AVALANCHE]: '0x4d4A0D45a98AE8EC25b359D93A088A87BC9eF70b',\n  [ChainId.XDAI]: '0x26DC4e2f63bad22BCdF99087E40bd5B6c456e69d',\n  [ChainId.BSC]: '0x9d6c13Bc5269E553C4697767b4c267FB33Dd8d1A',\n  [ChainId.ARBITRUM]: '0x0e9b6C08Fe70Aac8fd08a74a076c2B1C9f7c7d14',\n  [ChainId.HECO]: '0x4d4A0D45a98AE8EC25b359D93A088A87BC9eF70b',\n  [ChainId.KOVAN]: '0x980bE39AC44E5500f0f16bA692084A6E44e6549A',\n}\n\nexport const NEXU: AddressMap = {\n  [ChainId.XRPL]: '0xE268aDBDBAEC092C3822dCc00b47CBCE58A9E49e',\n  [ChainId.XDC]: '0x6DaF228391e388B05BBc682FEA3CB1Cc3E38c44E',\n  [ChainId.APOTHEM]: '0x997B6116f9Ec280E39C196D797b42eFA3E76B0F4',\n}\n\nexport const NEXU_DISTRIBUTOR_ADDRESS: AddressMap = {\n  [ChainId.XRPL]: '0xA2F08E00FA5425d75Fe704C658b597393DA74Ea3',\n  [ChainId.XDC]: '0x72E374332EBdcae18CDa5D37Ec02ceD619812c49',\n  [ChainId.APOTHEM]: '0x5b23CA41820cbaD7ee7359e165d16d7238a0DA83',\n}\n\nexport const MULTISTAKING_DISTRIBUTOR_ADDRESS: AddressMap = {\n  [ChainId.XRPL]: '0x6ab2913205C2Ece6A837000DD389Eb56F978eC35',\n  [ChainId.XDC]: '0xa96d4Dfb9EED8824cae29fA0b7e62c72b5e51018',\n  [ChainId.APOTHEM]: '0xCd472092d063a921beF71ee2d3986C1d6c24Aa22',\n}\n\nexport const NEXUS_NFT_MULTISTAKING_ADDRESS: AddressMap = {\n  [ChainId.XRPL]: '0x8c11b4Ee3d1B48129102B9afFe498AdC65F477BD',\n  [ChainId.XDC]: '0x94ed40CEE9b8752bfaD93F7F79D3E4Bc1b5fC78b',\n  [ChainId.APOTHEM]: '0x11C921B311FF37dd2DA55D43d477AD9E8876Aa31',\n}\n\nexport const NEXUS_NFT_ADDRESS: AddressMap = {\n  [ChainId.XRPL]: '0xC9e107660ee34487212239F56fD0a4f696dFb33e',\n  [ChainId.XDC]: '0x5272caeb01711af57a119a53be1b863cde8178bd',\n  [ChainId.APOTHEM]: '0x7174515087DE0b1dE50fADC076124284De5E17B3',\n}\n\nexport const NEXUS_NFT_WEIGHT_ADDRESS: AddressMap = {\n  [ChainId.XRPL]: '0xa96d4Dfb9EED8824cae29fA0b7e62c72b5e51018',\n  [ChainId.XDC]: '0x8DdD0FD4c84bf3FDb2A14CF98fAA48D0f82f4caF',\n  [ChainId.APOTHEM]: '0x220B919824F2D9546C08d1104bfae09b60B698A8',\n}\n\nexport const NEXUS_DIFFUSER_ADDRESS: AddressMap = {\n  [ChainId.XRPL]: '0x8E3d9073283d685bd4193923bA61D511C2cF2e94',\n  [ChainId.XDC]: '0x3B9BcAC92D979439372dc7c00520d663CB75325e',\n  [ChainId.APOTHEM]: '0xC73F62e87bCF3F0b70a0bb49569f5C0BBa6b937B',\n}\n","import { ChainId } from '../enums'\nimport { ChainKey } from '../enums'\n\nexport const CHAIN_KEY: { [chainId: number]: ChainKey } = {\n  [ChainId.ETHEREUM]: ChainKey.ETHEREUM,\n  [ChainId.ROPSTEN]: ChainKey.ROPSTEN,\n  [ChainId.RINKEBY]: ChainKey.RINKEBY,\n  [ChainId.GÖRLI]: ChainKey.GÖRLI,\n  [ChainId.KOVAN]: ChainKey.KOVAN,\n  [ChainId.MATIC]: ChainKey.MATIC,\n  [ChainId.MATIC_TESTNET]: ChainKey.MATIC_TESTNET,\n  [ChainId.FANTOM]: ChainKey.FANTOM,\n  [ChainId.FANTOM_TESTNET]: ChainKey.FANTOM_TESTNET,\n  [ChainId.XDAI]: ChainKey.XDAI,\n  [ChainId.BSC]: ChainKey.BSC,\n  [ChainId.BSC_TESTNET]: ChainKey.BSC_TESTNET,\n  [ChainId.ARBITRUM]: ChainKey.ARBITRUM,\n  [ChainId.ARBITRUM_TESTNET]: ChainKey.ARBITRUM_TESTNET,\n  [ChainId.MOONBEAM_TESTNET]: ChainKey.MOONBEAM_TESTNET,\n  [ChainId.AVALANCHE]: ChainKey.AVALANCHE,\n  [ChainId.AVALANCHE_TESTNET]: ChainKey.AVALANCHE_TESTNET,\n  [ChainId.HECO]: ChainKey.HECO,\n  [ChainId.HECO_TESTNET]: ChainKey.HECO_TESTNET,\n  [ChainId.HARMONY]: ChainKey.HARMONY,\n  [ChainId.HARMONY_TESTNET]: ChainKey.HARMONY_TESTNET,\n  [ChainId.OKEX]: ChainKey.OKEX,\n  [ChainId.OKEX_TESTNET]: ChainKey.OKEX_TESTNET,\n  [ChainId.CELO]: ChainKey.CELO,\n  [ChainId.PALM]: ChainKey.PALM,\n  [ChainId.PALM_TESTNET]: ChainKey.PALM_TESTNET,\n  [ChainId.MOONRIVER]: ChainKey.MOONRIVER,\n  [ChainId.FUSE]: ChainKey.FUSE,\n  [ChainId.TELOS]: ChainKey.TELOS,\n  [ChainId.XRPL]: ChainKey.XRPL,\n  [ChainId.XDC]: ChainKey.XDC,\n  [ChainId.APOTHEM]: ChainKey.APOTHEM,\n}\n","import { ChainId } from \"../enums/ChainId\";\n\nexport const INIT_CODE_HASH: { [chainId: number]: string } = {\n    [ChainId.ETHEREUM]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n    [ChainId.ROPSTEN]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n    [ChainId.RINKEBY]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n    [ChainId.GÖRLI]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n    [ChainId.KOVAN]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n    [ChainId.FANTOM]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n    [ChainId.MATIC]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n    [ChainId.MATIC_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n    [ChainId.XDAI]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n    [ChainId.BSC]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n    [ChainId.BSC_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n    [ChainId.ARBITRUM]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n    [ChainId.MOONBEAM_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n    [ChainId.AVALANCHE]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n    [ChainId.AVALANCHE_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n    [ChainId.HECO]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n    [ChainId.HECO_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n    [ChainId.HARMONY]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n    [ChainId.HARMONY_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n    [ChainId.OKEX]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n    [ChainId.OKEX_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n    [ChainId.CELO]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n    [ChainId.PALM]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n    [ChainId.MOONRIVER]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n    [ChainId.FUSE]: '0x1901958ef8b470f2c0a3875a79ee0bd303866d85102c0f1ea820d317024d50b5',\n    [ChainId.XRPL]: '0x69f87219435c6fe01b08d421b51fe0866c422f9b32e9e714e1f24068c99274fd',\n    [ChainId.APOTHEM]: '0x0a2c469b2309cda21c7cfb273e781a1cfdb5f9bb23fd392e51954af1e6342e38',\n    [ChainId.XDC]: '0x69f87219435c6fe01b08d421b51fe0866c422f9b32e9e714e1f24068c99274fd',\n  }","import { Currency } from './Currency'\nimport { Token } from './Token'\nimport invariant from 'tiny-invariant'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class AbstractCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: number\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\n   * implement this to be used in Uniswap\n   */\n  public abstract get wrapped(): Token\n}\n","import { AbstractCurrency } from './AbstractCurrency'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends AbstractCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n}\n","import { getAddress } from '@ethersproject/address'\nimport invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n","import { AbstractCurrency } from './AbstractCurrency'\nimport { Currency } from './Currency'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from '../functions/validateAndParseAddress'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends AbstractCurrency {\n  public readonly chainId: number\n  public readonly address: string\n\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  public constructor(chainId: number, address: string, decimals: number, symbol?: string, name?: string) {\n    super(chainId, decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n\n  /**\n   * Return logo\n   */\n  // public get logo(): string | null {\n  //   return this.chainId in CHAIN_KEY ? `https://raw.githubusercontent.com/sushiswap/logos/main/network/${CHAIN_KEY[this.chainId]}/.jpg` : undefined\n  // }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n","import { USDC_ADDRESS, USD_ADDRESS, WETH9_ADDRESS, WNATIVE_ADDRESS, SUSHI_ADDRESS } from './addresses'\n\nimport { ChainId } from '../enums'\nimport { Token } from '../entities/Token'\nimport { TokenMap, ChainTokenMap } from '../types'\n\nexport const USDC: TokenMap = {\n  [ChainId.ETHEREUM]: new Token(ChainId.ETHEREUM, USDC_ADDRESS[ChainId.ETHEREUM], 6, 'USDC', 'USD Coin'),\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, USDC_ADDRESS[ChainId.ROPSTEN], 6, 'USDC', 'USD Coin'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, USDC_ADDRESS[ChainId.KOVAN], 6, 'USDC', 'USD Coin'),\n  [ChainId.MATIC]: new Token(ChainId.MATIC, USDC_ADDRESS[ChainId.MATIC], 6, 'USDC', 'USD Coin'),\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, USDC_ADDRESS[ChainId.FANTOM], 6, 'USDC', 'USD Coin'),\n  [ChainId.BSC]: new Token(ChainId.BSC, USDC_ADDRESS[ChainId.BSC], 18, 'USDC', 'USD Coin'),\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, USDC_ADDRESS[ChainId.HARMONY], 6, 'USDC', 'USD Coin'),\n  [ChainId.HECO]: new Token(ChainId.HECO, USDC_ADDRESS[ChainId.HECO], 6, 'USDC', 'USD Coin'),\n  [ChainId.OKEX]: new Token(ChainId.OKEX, USDC_ADDRESS[ChainId.OKEX], 18, 'USDC', 'USD Coin'),\n  [ChainId.XDAI]: new Token(ChainId.XDAI, USDC_ADDRESS[ChainId.XDAI], 6, 'USDC', 'USD Coin'),\n  [ChainId.ARBITRUM]: new Token(ChainId.ARBITRUM, USDC_ADDRESS[ChainId.ARBITRUM], 6, 'USDC', 'USD Coin'),\n  [ChainId.MOONRIVER]: new Token(ChainId.MOONRIVER, USDC_ADDRESS[ChainId.MOONRIVER], 6, 'USDC', 'USD Coin'),\n\n}\n\nexport const USD: TokenMap = {\n  ...USDC,\n  [ChainId.CELO]: new Token(ChainId.CELO, USD_ADDRESS[ChainId.CELO], 18, 'cUSD', 'Celo Dollar'),\n}\n\nexport const WETH9: TokenMap = {\n  [ChainId.ETHEREUM]: new Token(ChainId.ETHEREUM, WETH9_ADDRESS[ChainId.ETHEREUM], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, WETH9_ADDRESS[ChainId.ROPSTEN], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.RINKEBY]: new Token(ChainId.RINKEBY, WETH9_ADDRESS[ChainId.RINKEBY], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, WETH9_ADDRESS[ChainId.GÖRLI], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, WETH9_ADDRESS[ChainId.KOVAN], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.ARBITRUM]: new Token(ChainId.ARBITRUM, WETH9_ADDRESS[ChainId.ARBITRUM], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.ARBITRUM_TESTNET]: new Token(\n    ChainId.ARBITRUM_TESTNET,\n    WETH9_ADDRESS[ChainId.ARBITRUM_TESTNET],\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.BSC]: new Token(ChainId.BSC, WETH9_ADDRESS[ChainId.BSC], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, WETH9_ADDRESS[ChainId.FANTOM], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.MATIC]: new Token(ChainId.MATIC, WETH9_ADDRESS[ChainId.MATIC], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.OKEX]: new Token(ChainId.OKEX, WETH9_ADDRESS[ChainId.OKEX], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.HECO]: new Token(ChainId.HECO, WETH9_ADDRESS[ChainId.HECO], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, WETH9_ADDRESS[ChainId.HARMONY], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.XDAI]: new Token(ChainId.XDAI, WETH9_ADDRESS[ChainId.XDAI], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.AVALANCHE]: new Token(ChainId.AVALANCHE, WETH9_ADDRESS[ChainId.AVALANCHE], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.PALM]: new Token(ChainId.PALM, WETH9_ADDRESS[ChainId.PALM], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.XRPL]: new Token(ChainId.XRPL, WETH9_ADDRESS[ChainId.XRPL], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.XDC]: new Token(ChainId.XDC, WETH9_ADDRESS[ChainId.XDC], 18, 'WXDC', 'Wrapped XDC'),\n  [ChainId.APOTHEM]: new Token(ChainId.APOTHEM, WETH9_ADDRESS[ChainId.APOTHEM], 18, 'WXDC', 'Wrapped TXDC'),\n}\n\nexport const WNATIVE: TokenMap = {\n  [ChainId.ETHEREUM]: WETH9[ChainId.ETHEREUM],\n  [ChainId.ROPSTEN]: WETH9[ChainId.ROPSTEN],\n  [ChainId.RINKEBY]: WETH9[ChainId.RINKEBY],\n  [ChainId.GÖRLI]: WETH9[ChainId.GÖRLI],\n  [ChainId.KOVAN]: WETH9[ChainId.KOVAN],\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, WNATIVE_ADDRESS[ChainId.FANTOM], 18, 'WFTM', 'Wrapped FTM'),\n  [ChainId.FANTOM_TESTNET]: new Token(\n    ChainId.FANTOM_TESTNET,\n    WNATIVE_ADDRESS[ChainId.FANTOM_TESTNET],\n    18,\n    'FTM',\n    'Wrapped FTM'\n  ),\n  [ChainId.MATIC]: new Token(ChainId.MATIC, WNATIVE_ADDRESS[ChainId.MATIC], 18, 'WMATIC', 'Wrapped Matic'),\n  [ChainId.MATIC_TESTNET]: new Token(\n    ChainId.MATIC_TESTNET,\n    WNATIVE_ADDRESS[ChainId.MATIC_TESTNET],\n    18,\n    'WMATIC',\n    'Wrapped Matic'\n  ),\n  [ChainId.XDAI]: new Token(ChainId.XDAI, WNATIVE_ADDRESS[ChainId.XDAI], 18, 'WXDAI', 'Wrapped xDai'),\n  [ChainId.BSC]: new Token(ChainId.BSC, WNATIVE_ADDRESS[ChainId.BSC], 18, 'WBNB', 'Wrapped BNB'),\n  [ChainId.BSC_TESTNET]: new Token(\n    ChainId.BSC_TESTNET,\n    WNATIVE_ADDRESS[ChainId.BSC_TESTNET],\n    18,\n    'WBNB',\n    'Wrapped BNB'\n  ),\n  [ChainId.ARBITRUM]: WETH9[ChainId.ARBITRUM],\n  [ChainId.ARBITRUM_TESTNET]: WETH9[ChainId.ARBITRUM_TESTNET],\n  [ChainId.MOONBEAM_TESTNET]: new Token(\n    ChainId.MOONBEAM_TESTNET,\n    WNATIVE_ADDRESS[ChainId.MOONBEAM_TESTNET],\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.AVALANCHE]: new Token(ChainId.AVALANCHE, WNATIVE_ADDRESS[ChainId.AVALANCHE], 18, 'WAVAX', 'Wrapped AVAX'),\n  [ChainId.AVALANCHE_TESTNET]: new Token(\n    ChainId.AVALANCHE_TESTNET,\n    WNATIVE_ADDRESS[ChainId.AVALANCHE_TESTNET],\n    18,\n    'WAVAX',\n    'Wrapped AVAX'\n  ),\n  [ChainId.HECO]: new Token(ChainId.HECO, WNATIVE_ADDRESS[ChainId.HECO], 18, 'WHT', 'Wrapped HT'),\n  [ChainId.HECO_TESTNET]: new Token(\n    ChainId.HECO_TESTNET,\n    WNATIVE_ADDRESS[ChainId.HECO_TESTNET],\n    18,\n    'WHT',\n    'Wrapped HT'\n  ),\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, WNATIVE_ADDRESS[ChainId.HARMONY], 18, 'WONE', 'Wrapped ONE'),\n  [ChainId.HARMONY_TESTNET]: new Token(\n    ChainId.HARMONY_TESTNET,\n    WNATIVE_ADDRESS[ChainId.HARMONY_TESTNET],\n    18,\n    'WONE',\n    'Wrapped ONE'\n  ),\n  [ChainId.OKEX]: new Token(ChainId.OKEX, WNATIVE_ADDRESS[ChainId.OKEX], 18, 'WOKT', 'Wrapped OKExChain'),\n  [ChainId.OKEX_TESTNET]: new Token(\n    ChainId.OKEX_TESTNET,\n    WNATIVE_ADDRESS[ChainId.OKEX_TESTNET],\n    18,\n    'WOKT',\n    'Wrapped OKExChain'\n  ),\n  [ChainId.CELO]: new Token(ChainId.CELO, WNATIVE_ADDRESS[ChainId.CELO], 18, 'CELO', 'Celo'),\n  [ChainId.PALM]: new Token(ChainId.PALM, WNATIVE_ADDRESS[ChainId.PALM], 18, 'WPALM', 'Wrapped Palm'),\n  [ChainId.MOONRIVER]: new Token(\n    ChainId.MOONRIVER,\n    WNATIVE_ADDRESS[ChainId.MOONRIVER],\n    18,\n    'WMOVR',\n    'Wrapped Moonriver'\n  ),\n  [ChainId.FUSE]: new Token(ChainId.FUSE, WNATIVE_ADDRESS[ChainId.FUSE], 18, 'WFUSE', 'Wrapped Fuse'),\n  [ChainId.TELOS]: new Token(ChainId.TELOS, WNATIVE_ADDRESS[ChainId.TELOS], 18, 'WTLOS', 'Wrapped Telos'),\n  [ChainId.XRPL]: new Token(ChainId.XRPL, WNATIVE_ADDRESS[ChainId.XRPL], 18, 'WXRP', 'Wrapped Ripple'),\n  [ChainId.XDC]: new Token(ChainId.XDC, WNATIVE_ADDRESS[ChainId.XDC], 18, 'WXDC', 'Wrapped XDC'),\n  [ChainId.APOTHEM]: new Token(ChainId.APOTHEM, WNATIVE_ADDRESS[ChainId.APOTHEM], 18, 'WXDC', 'Wrapped TXDC'),\n\n}\n\nexport const SUSHI: ChainTokenMap = {\n  [ChainId.ETHEREUM]: new Token(ChainId.ETHEREUM, SUSHI_ADDRESS[ChainId.ETHEREUM], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, SUSHI_ADDRESS[ChainId.ROPSTEN], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.RINKEBY]: new Token(ChainId.RINKEBY, SUSHI_ADDRESS[ChainId.RINKEBY], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, SUSHI_ADDRESS[ChainId.GÖRLI], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, SUSHI_ADDRESS[ChainId.KOVAN], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.MATIC]: new Token(ChainId.MATIC, SUSHI_ADDRESS[ChainId.MATIC], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, SUSHI_ADDRESS[ChainId.FANTOM], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.XDAI]: new Token(ChainId.XDAI, SUSHI_ADDRESS[ChainId.XDAI], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.BSC]: new Token(ChainId.BSC, SUSHI_ADDRESS[ChainId.BSC], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.ARBITRUM]: new Token(ChainId.ARBITRUM, SUSHI_ADDRESS[ChainId.ARBITRUM], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.AVALANCHE]: new Token(ChainId.AVALANCHE, SUSHI_ADDRESS[ChainId.AVALANCHE], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.OKEX]: new Token(ChainId.OKEX, SUSHI_ADDRESS[ChainId.OKEX], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, SUSHI_ADDRESS[ChainId.HARMONY], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.HECO]: new Token(ChainId.HECO, SUSHI_ADDRESS[ChainId.HECO], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.CELO]: new Token(ChainId.CELO, SUSHI_ADDRESS[ChainId.CELO], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.MOONRIVER]: new Token(ChainId.MOONRIVER, SUSHI_ADDRESS[ChainId.MOONRIVER], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.XRPL]: new Token(ChainId.XRPL, SUSHI_ADDRESS[ChainId.XRPL], 18, 'SUSHI', 'SushiToken'),\n\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Avalanche extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'AVAX', 'Avalanche')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Avalanche } = {}\n\n  public static onChain(chainId: number): Avalanche {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Avalanche(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Binance extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'BNB', 'Binance Coin')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Binance } = {}\n\n  public static onChain(chainId: number): Binance {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Binance(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Celo extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'CELO', 'Celo')\n  }\n\n  public get wrapped(): Token {\n    const wcelo = WNATIVE[this.chainId]\n    invariant(!!wcelo, 'WRAPPED')\n    return wcelo\n  }\n\n  private static _cache: { [chainId: number]: Celo } = {}\n\n  public static onChain(chainId: number): Celo {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Celo(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WETH9 } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Ether')\n  }\n\n  public get wrapped(): Token {\n    const weth9 = WETH9[this.chainId]\n    invariant(!!weth9, 'WRAPPED')\n    return weth9\n  }\n\n  private static _etherCache: { [chainId: number]: Ether } = {}\n\n  public static onChain(chainId: number): Ether {\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Fantom extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'FTM', 'Fantom')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Fantom } = {}\n\n  public static onChain(chainId: number): Fantom {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Fantom(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Harmony extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ONE', 'Harmony')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Harmony } = {}\n\n  public static onChain(chainId: number): Harmony {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Harmony(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Heco extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'HT', 'Huobi Token')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Heco } = {}\n\n  public static onChain(chainId: number): Heco {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Heco(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Matic extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'MATIC', 'Matic')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Matic } = {}\n\n  public static onChain(chainId: number): Matic {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Matic(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Movr extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'MOVR', 'Moonriver')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Movr } = {}\n\n  public static onChain(chainId: number): Movr {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Movr(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Okex extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'OKT', 'OKExChain')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Okex } = {}\n\n  public static onChain(chainId: number): Okex {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Okex(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class xDai extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'XDAI', 'xDai')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: xDai } = {}\n\n  public static onChain(chainId: number): xDai {\n    return this._cache[chainId] ?? (this._cache[chainId] = new xDai(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Palm extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'PALM', 'Palm')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Palm } = {}\n\n  public static onChain(chainId: number): Palm {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Palm(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Fuse extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'FUSE', 'Fuse')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Fuse } = {}\n\n  public static onChain(chainId: number): Fuse {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Fuse(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Songbird extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ONE', 'Songbird')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Songbird } = {}\n\n  public static onChain(chainId: number): Songbird {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Songbird(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class EXRP extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'XRP', 'XRP')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: EXRP } = {}\n\n  public static onChain(chainId: number): EXRP {\n    return this._cache[chainId] ?? (this._cache[chainId] = new EXRP(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Apothem extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'TXDC', 'Apothem')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Apothem } = {}\n\n  public static onChain(chainId: number): Apothem {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Apothem(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Xdc extends NativeCurrency {\n    protected constructor(chainId: number) {\n        super(chainId, 18, 'XDC', 'XDC')\n    }\n\n    public get wrapped(): Token {\n        const wnative = WNATIVE[this.chainId]\n        invariant(!!wnative, 'WRAPPED')\n        return wnative\n    }\n\n    private static _cache: { [chainId: number]: Xdc } = {}\n\n    public static onChain(chainId: number): Xdc {\n        return this._cache[chainId] ?? (this._cache[chainId] = new Xdc(chainId))\n    }\n\n    public equals(other: Currency): boolean {\n        return other.isNative && other.chainId === this.chainId\n    }\n}\n","import {\n  Avalanche,\n  Binance,\n  Celo,\n  Ether,\n  Fantom,\n  Fuse,\n  Harmony,\n  Heco,\n  Matic,\n  Movr,\n  Okex,\n  Palm,\n  xDai,\n  EXRP as Exrp,\n  Apothem,\n  Xdc\n} from '../entities/Native'\n\nimport { ChainId } from '../enums'\n\nexport const NATIVE = {\n  [ChainId.ETHEREUM]: Ether.onChain(ChainId.ETHEREUM),\n  [ChainId.ROPSTEN]: Ether.onChain(ChainId.ROPSTEN),\n  [ChainId.RINKEBY]: Ether.onChain(ChainId.RINKEBY),\n  [ChainId.GÖRLI]: Ether.onChain(ChainId.GÖRLI),\n  [ChainId.KOVAN]: Ether.onChain(ChainId.KOVAN),\n  [ChainId.FANTOM]: Fantom.onChain(ChainId.FANTOM),\n  [ChainId.FANTOM_TESTNET]: Fantom.onChain(ChainId.FANTOM_TESTNET),\n  [ChainId.MATIC]: Matic.onChain(ChainId.MATIC),\n  [ChainId.MATIC_TESTNET]: Matic.onChain(ChainId.MATIC_TESTNET),\n  [ChainId.XDAI]: xDai.onChain(ChainId.XDAI),\n  [ChainId.BSC]: Binance.onChain(ChainId.BSC),\n  [ChainId.BSC_TESTNET]: Binance.onChain(ChainId.BSC_TESTNET),\n  // [ChainId.MOONBEAM_TESTNET]: Currency.GLMR,\n  [ChainId.ARBITRUM]: Ether.onChain(ChainId.ARBITRUM),\n  [ChainId.AVALANCHE]: Avalanche.onChain(ChainId.AVALANCHE),\n  [ChainId.AVALANCHE_TESTNET]: Avalanche.onChain(ChainId.AVALANCHE_TESTNET),\n  [ChainId.HECO]: Heco.onChain(ChainId.HECO),\n  [ChainId.HECO_TESTNET]: Heco.onChain(ChainId.HECO_TESTNET),\n  [ChainId.HARMONY]: Harmony.onChain(ChainId.HARMONY),\n  [ChainId.HARMONY_TESTNET]: Harmony.onChain(ChainId.HARMONY_TESTNET),\n  [ChainId.OKEX]: Okex.onChain(ChainId.OKEX),\n  [ChainId.OKEX_TESTNET]: Okex.onChain(ChainId.OKEX_TESTNET),\n  [ChainId.CELO]: Celo.onChain(ChainId.CELO),\n  [ChainId.PALM]: Palm.onChain(ChainId.PALM),\n  [ChainId.MOONRIVER]: Movr.onChain(ChainId.MOONRIVER),\n  [ChainId.FUSE]: Fuse.onChain(ChainId.FUSE),\n  [ChainId.XRPL]: Exrp.onChain(ChainId.XRPL),\n  [ChainId.APOTHEM]: Apothem.onChain(ChainId.APOTHEM),\n  [ChainId.XDC]: Xdc.onChain(ChainId.XDC),\n}\n","import JSBI from 'jsbi'\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)","import JSBI from 'jsbi'\nimport { SolidityType } from \"../enums/SolidityType\";\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'),\n}","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import _Big, { RoundingMode } from 'big.js'\n\nimport { BigintIsh } from '../types'\nimport JSBI from 'jsbi'\nimport { Rounding } from '../enums'\nimport _Decimal from 'decimal.js-light'\nimport invariant from 'tiny-invariant'\nimport toFormat from 'toformat'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nBig.strict = true\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP,\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: Rounding.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Rounding.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Rounding.ROUND_UP,\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({\n      precision: significantDigits + 1,\n      rounding: toSignificantRounding[rounding],\n    })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import { BigintIsh } from '../types'\nimport { Currency } from './Currency'\nimport { Fraction } from './Fraction'\nimport JSBI from 'jsbi'\nimport { MaxUint256 } from '../constants'\nimport { Rounding } from '../enums'\nimport { Token } from './Token'\nimport _Big from 'big.js'\nimport invariant from 'tiny-invariant'\nimport toFormat from 'toformat'\n\nconst Big = toFormat(_Big)\n\nBig.strict = true\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\n  }\n\n  /**\n   * Returns a string representation of the address and currency amount.\n   * Useful in cases where a dependency is needed to detect changes (e.g. useEffect).\n   * @return string [0x6B3595068778DD592e39A122f4f5a5cF09C90fE2 - 1323.94]\n   */\n  public serialize(): string {\n    return `[${this.currency.wrapped.address} - ${this.toExact()}]`\n  }\n}\n","import { BigintIsh } from '../types'\nimport { Currency } from './Currency'\nimport { CurrencyAmount } from './CurrencyAmount'\nimport { Fraction } from './Fraction'\nimport JSBI from 'jsbi'\nimport { Rounding } from '../enums'\nimport invariant from 'tiny-invariant'\n\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [\n          {\n            baseAmount: CurrencyAmount<TBase>\n            quoteAmount: CurrencyAmount<TQuote>\n          }\n        ]\n  ) {\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\n\n    if (args.length === 4) {\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator,\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { keccak256, pack } from '@ethersproject/solidity'\n\nimport { INIT_CODE_HASH } from '../constants'\nimport { Token } from '../entities/Token'\nimport { getCreate2Address } from '@ethersproject/address'\n\nexport const computePairAddress = ({\n  factoryAddress,\n  tokenA,\n  tokenB,\n}: {\n  factoryAddress: string\n  tokenA: Token\n  tokenB: Token\n}): string => {\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n  return getCreate2Address(\n    factoryAddress,\n    keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\n    INIT_CODE_HASH[token0.chainId]\n  )\n}\n","import { ONE, TWO, ZERO } from '../constants/numbers'\n\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\n\n/**\n * Computes floor(sqrt(value))\n * @param value the value for which to compute the square root, rounded down\n */\nexport function sqrt(value: JSBI): JSBI {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\n\n  // rely on built in sqrt if possible\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\n  }\n\n  let z: JSBI\n  let x: JSBI\n  z = value\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\n  while (JSBI.lessThan(x, z)) {\n    z = x\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\n  }\n  return z\n}\n\n/**\n * Returns the smallest member of the array\n * @param values the values from which the smallest gets returned\n * @returns the smallest memmber of the array\n */\nexport function minimum(...values: JSBI[]): JSBI {\n  let lowest = values[0]\n  for (let i = 1; i < values.length; i++) {\n    const value = values[i]\n    if (JSBI.LT(value, lowest)) {\n      lowest = value\n    }\n  }\n  return lowest\n}\n\n/**\n * Returns the biggest member of the array\n * @param values the values from which the biggest gets returned\n * @returns the biggest memmber of the array\n */\nexport function maximum(...values: JSBI[]): JSBI {\n  let highest = values[0]\n  for (let i = 1; i < values.length; i++) {\n    const value = values[i]\n    if (JSBI.GT(value, highest)) {\n      highest = value\n    }\n  }\n  return highest\n}\n\nexport function difference(a: JSBI, b: JSBI): JSBI {\n  if (JSBI.greaterThan(a, b)) {\n    return JSBI.subtract(a, b)\n  }\n  return JSBI.subtract(b, a)\n}\n","import { FACTORY_ADDRESS, FIVE, MINIMUM_LIQUIDITY, ONE, ZERO, _1000, _997 } from '../constants'\nimport { InsufficientInputAmountError, InsufficientReservesError } from '../errors'\n\nimport { BigintIsh } from '../types'\nimport { CurrencyAmount } from './CurrencyAmount'\nimport JSBI from 'jsbi'\nimport { Price } from './Price'\nimport { Token } from './Token'\nimport { computePairAddress } from '../functions/computePairAddress'\nimport invariant from 'tiny-invariant'\nimport { sqrt } from '../functions/math'\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [CurrencyAmount<Token>, CurrencyAmount<Token>]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    return computePairAddress({\n      factoryAddress: FACTORY_ADDRESS[tokenA.chainId],\n      tokenA,\n      tokenB,\n    })\n  }\n\n  public constructor(currencyAmountA: CurrencyAmount<Token>, currencyAmountB: CurrencyAmount<Token>) {\n    const currencyAmounts = currencyAmountA.currency.sortsBefore(currencyAmountB.currency) // does safety checks\n      ? [currencyAmountA, currencyAmountB]\n      : [currencyAmountB, currencyAmountA]\n    this.liquidityToken = new Token(\n      currencyAmounts[0].currency.chainId,\n      Pair.getAddress(currencyAmounts[0].currency, currencyAmounts[1].currency),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = currencyAmounts as [CurrencyAmount<Token>, CurrencyAmount<Token>]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[1].divide(this.tokenAmounts[0])\n    return new Price(this.token0, this.token1, result.denominator, result.numerator)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[0].divide(this.tokenAmounts[1])\n    return new Price(this.token1, this.token0, result.denominator, result.numerator)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price<Token, Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): number {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].currency\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].currency\n  }\n\n  public get reserve0(): CurrencyAmount<Token> {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): CurrencyAmount<Token> {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.currency)\n    const outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.quotient, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.quotient)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFee)\n    const outputAmount = CurrencyAmount.fromRawAmount(\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(outputAmount.currency), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.currency)\n    const inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmount.quotient), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.quotient, outputAmount.quotient), _997)\n    const inputAmount = CurrencyAmount.fromRawAmount(\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: CurrencyAmount<Token>,\n    tokenAmountA: CurrencyAmount<Token>,\n    tokenAmountB: CurrencyAmount<Token>\n  ): CurrencyAmount<Token> {\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\n      liquidity = JSBI.subtract(\n        sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\n        MINIMUM_LIQUIDITY\n      )\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n\n      console.log({\n        amount0: amount0.toString(),\n        amount1: amount1.toString(),\n        liquidity: liquidity.toString(),\n        totalSupply: totalSupply.quotient.toString(),\n        kLast: sqrt(JSBI.multiply(this.tokenAmounts[0].quotient, this.tokenAmounts[1].quotient)),\n      })\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n\n    return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: CurrencyAmount<Token>,\n    liquidity: CurrencyAmount<Token>,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: CurrencyAmount<Token>\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = JSBI.BigInt(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.quotient, this.reserve1.quotient))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.quotient, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(CurrencyAmount.fromRawAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return CurrencyAmount.fromRawAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupplyAdjusted.quotient)\n    )\n  }\n}\n","import { BigintIsh } from '../types'\nimport { Fraction } from './Fraction'\nimport JSBI from 'jsbi'\nimport { Rounding } from '../enums'\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator)\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other))\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other))\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other))\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other))\n  }\n\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Currency } from './Currency'\nimport { Pair } from './Pair'\nimport { Price } from './Price'\nimport { Token } from './Token'\nimport invariant from 'tiny-invariant'\n\nexport class Route<TInput extends Currency, TOutput extends Currency> {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: TInput\n  public readonly output: TOutput\n\n  public constructor(pairs: Pair[], input: TInput, output: TOutput) {\n    invariant(pairs.length > 0, 'PAIRS')\n    const chainId: number = pairs[0].chainId\n    invariant(\n      pairs.every((pair) => pair.chainId === chainId),\n      'CHAIN_IDS'\n    )\n\n    const wrappedInput = input.wrapped\n    invariant(pairs[0].involvesToken(wrappedInput), 'INPUT')\n    invariant(typeof output === 'undefined' || pairs[pairs.length - 1].involvesToken(output.wrapped), 'OUTPUT')\n\n    const path: Token[] = [wrappedInput]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.input = input\n    this.output = output\n  }\n\n  private _midPrice: Price<TInput, TOutput> | null = null\n\n  public get midPrice(): Price<TInput, TOutput> {\n    if (this._midPrice !== null) return this._midPrice\n    const prices: Price<Currency, Currency>[] = []\n    for (const [i, pair] of this.pairs.entries()) {\n      prices.push(\n        this.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.quotient, pair.reserve1.quotient)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.quotient, pair.reserve0.quotient)\n      )\n    }\n    const reduced = prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n    return (this._midPrice = new Price(this.input, this.output, reduced.denominator, reduced.numerator))\n  }\n\n  public get chainId(): number {\n    return this.pairs[0].chainId\n  }\n}\n","import { Currency } from '../entities/Currency'\nimport { CurrencyAmount } from '../entities/CurrencyAmount'\nimport { Percent } from '../entities/Percent'\nimport { Price } from '../entities/Price'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\n  midPrice: Price<TBase, TQuote>,\n  inputAmount: CurrencyAmount<TBase>,\n  outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n","import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import { ONE, ZERO } from '../constants'\n\nimport { Currency } from './Currency'\nimport { CurrencyAmount } from './CurrencyAmount'\nimport { Fraction } from './Fraction'\nimport { Pair } from './Pair'\nimport { Percent } from './Percent'\nimport { Price } from './Price'\nimport { Route } from './Route'\nimport { Token } from './Token'\nimport { TradeType } from '../enums/TradeType'\nimport { computePriceImpact } from '../functions/computePriceImpact'\nimport invariant from 'tiny-invariant'\nimport { sortedInsert } from '../functions/sortedInsert'\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput<TInput extends Currency, TOutput extends Currency> {\n  readonly inputAmount: CurrencyAmount<TInput>\n  readonly outputAmount: CurrencyAmount<TOutput>\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator<TInput extends Currency, TOutput extends Currency>(\n  a: InputOutput<TInput, TOutput>,\n  b: InputOutput<TInput, TOutput>\n): number {\n  // must have same input and output token for comparison\n  invariant(a.inputAmount.currency.equals(b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(a.outputAmount.currency.equals(b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n  a: Trade<TInput, TOutput, TTradeType>,\n  b: Trade<TInput, TOutput, TTradeType>\n) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through and the input/output currencies.\n   */\n  public readonly route: Route<TInput, TOutput>\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TTradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount<TInput>\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount<TOutput>\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price<TInput, TOutput>\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountIn: CurrencyAmount<TInput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT> {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountOut: CurrencyAmount<TOutput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT> {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(\n    route: Route<TInput, TOutput>,\n    amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\n    tradeType: TTradeType\n  ) {\n    this.route = route\n    this.tradeType = tradeType\n\n    const tokenAmounts: CurrencyAmount<Token>[] = new Array(route.path.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(amount.currency.equals(route.input), 'INPUT')\n      tokenAmounts[0] = amount.wrapped\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount] = pair.getOutputAmount(tokenAmounts[i])\n        tokenAmounts[i + 1] = outputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(\n        route.output,\n        tokenAmounts[tokenAmounts.length - 1].numerator,\n        tokenAmounts[tokenAmounts.length - 1].denominator\n      )\n    } else {\n      invariant(amount.currency.equals(route.output), 'OUTPUT')\n      tokenAmounts[tokenAmounts.length - 1] = amount.wrapped\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount] = pair.getInputAmount(tokenAmounts[i])\n        tokenAmounts[i - 1] = inputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(\n        route.input,\n        tokenAmounts[0].numerator,\n        tokenAmounts[0].denominator\n      )\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\n    }\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.quotient,\n      this.outputAmount.quotient\n    )\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount<TOutput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount<TInput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE)\n        .add(slippageTolerance)\n        .multiply(this.inputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param nextAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount<TInput>,\n    currencyOut: TOutput,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountIn === nextAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountIn = nextAmountIn.wrapped\n    const tokenOut = currencyOut.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.currency) && !pair.token1.equals(amountIn.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: CurrencyAmount<Token>\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.currency.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], currencyAmountIn.currency, currencyOut),\n            currencyAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          currencyAmountIn,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1,\n          },\n          [...currentPairs, pair],\n          amountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * Return the execution price after accounting for slippage tolerance\n   * @param slippageTolerance the allowed tolerated slippage\n   */\n  public worstExecutionPrice(slippageTolerance: Percent): Price<TInput, TOutput> {\n    return new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.maximumAmountIn(slippageTolerance).quotient,\n      this.minimumAmountOut(slippageTolerance).quotient\n    )\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param nextAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyIn: TInput,\n    currencyAmountOut: CurrencyAmount<TOutput>,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountOut: CurrencyAmount<Currency> = currencyAmountOut,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountOut === nextAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountOut = nextAmountOut.wrapped\n    const tokenIn = currencyIn.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.currency) && !pair.token1.equals(amountOut.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: CurrencyAmount<Token>\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.currency.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, currencyAmountOut.currency),\n            currencyAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          currencyAmountOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1,\n          },\n          [pair, ...currentPairs],\n          amountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { JsonRpcSigner, Web3Provider } from '@ethersproject/providers'\n\n// account is not optional\nexport function getSigner(library: Web3Provider, account: string): JsonRpcSigner {\n  return library.getSigner(account).connectUnchecked()\n}\n\n// account is optional\nexport function getProviderOrSigner(library: Web3Provider, account?: string): Web3Provider | JsonRpcSigner {\n  return account ? getSigner(library, account) : library\n}\n","import JSBI from 'jsbi'\n\nimport { ONE, ZERO } from '../constants'\nimport { Rebase } from '../interfaces'\n\nexport function rebase(value: JSBI, from: JSBI, to: JSBI): JSBI {\n  return from ? JSBI.divide(JSBI.multiply(value, to), from) : ZERO\n}\n\nexport function toElastic(total: Rebase, base: JSBI, roundUp: boolean): JSBI {\n  let elastic: JSBI\n  if (JSBI.equal(total.base, ZERO)) {\n    elastic = base\n  } else {\n    elastic = JSBI.divide(JSBI.multiply(base, total.elastic), total.base)\n    if (roundUp && JSBI.lessThan(JSBI.divide(JSBI.multiply(elastic, total.base), total.elastic), base)) {\n      elastic = JSBI.add(elastic, ONE)\n    }\n  }\n\n  return elastic\n}\n","import { SOLIDITY_TYPE_MAXIMA, ZERO } from '../constants'\nimport { SolidityType } from '../enums'\n\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n","import { Currency } from './entities/Currency'\nimport { CurrencyAmount } from './entities/CurrencyAmount'\nimport { Percent } from './entities/Percent'\nimport { Token } from './entities/Token'\nimport { Trade } from './entities/Trade'\nimport { TradeType } from './enums/TradeType'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './functions/validateAndParseAddress'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nexport function toHex(currencyAmount: CurrencyAmount<Currency>) {\n  return `0x${currencyAmount.quotient.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(\n    trade: Trade<Currency, Currency, TradeType>,\n    options: TradeOptions | TradeOptionsDeadline\n  ): SwapParameters {\n    const etherIn = trade.inputAmount.currency.isNative\n    const etherOut = trade.outputAmount.currency.isNative\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map((token: Token) => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value,\n    }\n  }\n}\n"],"names":["ChainId","ChainKey","Rounding","SolidityType","TradeType","TradeVersion","SUSHI_ADDRESS","_SUSHI_ADDRESS","ETHEREUM","ROPSTEN","RINKEBY","GÖRLI","KOVAN","FANTOM","MATIC","XDAI","BSC","ARBITRUM","AVALANCHE","HECO","HARMONY","OKEX","OKEX_TESTNET","CELO","PALM","PALM_TESTNET","MOONRIVER","TELOS","XRPL","XDC","APOTHEM","USDC_ADDRESS","_USDC_ADDRESS","USD_ADDRESS","_USD_ADDRESS","WETH9_ADDRESS","_WETH9_ADDRESS","ARBITRUM_TESTNET","WNATIVE_ADDRESS","_WNATIVE_ADDRESS","FANTOM_TESTNET","MATIC_TESTNET","BSC_TESTNET","MOONBEAM_TESTNET","AVALANCHE_TESTNET","HECO_TESTNET","HARMONY_TESTNET","FUSE","DAI_ADDRESS","_DAI_ADDRESS","USDT_ADDRESS","_USDT_ADDRESS","FACTORY_ADDRESS","_FACTORY_ADDRESS","ROUTER_ADDRESS","_ROUTER_ADDRESS","MASTERCHEF_ADDRESS","_MASTERCHEF_ADDRESS","BAR_ADDRESS","_BAR_ADDRESS","MAKER_ADDRESS","_MAKER_ADDRESS","TIMELOCK_ADDRESS","_TIMELOCK_ADDRESS","BENTOBOX_ADDRESS","_BENTOBOX_ADDRESS","KASHI_ADDRESS","_KASHI_ADDRESS","SUSHISWAP_SWAPPER_ADDRESS","_SUSHISWAP_SWAPPER_AD","SUSHISWAP_MULTISWAPPER_ADDRESS","_SUSHISWAP_MULTISWAPP","SUSHISWAP_MULTI_EXACT_SWAPPER_ADDRESS","_SUSHISWAP_MULTI_EXAC","PEGGED_ORACLE_ADDRESS","SUSHISWAP_TWAP_0_ORACLE_ADDRESS","SUSHISWAP_TWAP_1_ORACLE_ADDRESS","CHAINLINK_ORACLE_ADDRESS","_CHAINLINK_ORACLE_ADD","BORING_HELPER_ADDRESS","_BORING_HELPER_ADDRES","MINICHEF_ADDRESS","_MINICHEF_ADDRESS","MASTERCHEF_V2_ADDRESS","_MASTERCHEF_V2_ADDRES","ENS_REGISTRAR_ADDRESS","_ENS_REGISTRAR_ADDRES","ZAPPER_ADDRESS","_ZAPPER_ADDRESS","MERKLE_DISTRIBUTOR_ADDRESS","_MERKLE_DISTRIBUTOR_A","MULTICALL2_ADDRESS","_MULTICALL2_ADDRESS","BALANCE_FETCHER_ADDRESS","_BALANCE_FETCHER_ADDR","NEXU","_NEXU","NEXU_DISTRIBUTOR_ADDRESS","_NEXU_DISTRIBUTOR_ADD","MULTISTAKING_DISTRIBUTOR_ADDRESS","_MULTISTAKING_DISTRIB","NEXUS_NFT_MULTISTAKING_ADDRESS","_NEXUS_NFT_MULTISTAKI","NEXUS_NFT_ADDRESS","_NEXUS_NFT_ADDRESS","NEXUS_NFT_WEIGHT_ADDRESS","_NEXUS_NFT_WEIGHT_ADD","NEXUS_DIFFUSER_ADDRESS","_NEXUS_DIFFUSER_ADDRE","CHAIN_KEY","_CHAIN_KEY","INIT_CODE_HASH","_INIT_CODE_HASH","AbstractCurrency","chainId","decimals","symbol","name","Number","isSafeInteger","process","invariant","isInteger","NativeCurrency","_AbstractCurrency","_this","_inheritsLoose","validateAndParseAddress","address","checksummedAddress","getAddress","warning","error","Token","call","_proto","prototype","equals","other","isToken","sortsBefore","toLowerCase","_createClass","key","get","currencyEquals","currencyA","currencyB","USDC","_USDC","USD","_extends","_extends2","WETH9","_WETH","WNATIVE","_WNATIVE","SUSHI","_SUSHI","Avalanche","_NativeCurrency","onChain","_this$_cache$chainId","_cache","isNative","wnative","Binance","Celo","wcelo","Ether","_this$_etherCache$cha","_etherCache","weth9","Fantom","Harmony","Heco","Matic","Movr","Okex","xDai","Palm","Fuse","Songbird","EXRP","Apothem","Xdc","NATIVE","_NATIVE","Exrp","MaxUint256","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","MINIMUM_LIQUIDITY","SOLIDITY_TYPE_MAXIMA","_SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","_Error","constructor","setPrototypeOf","_wrapNativeSuper","Error","InsufficientInputAmountError","_Error2","_this2","Decimal","toFormat","_Decimal","Big","_Big","strict","toSignificantRounding","_toSignificantRoundin","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","_toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","invert","add","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","_Fraction","currency","lessThanOrEqual","decimalScale","exponentiate","fromRawAmount","rawAmount","fromFractionalAmount","added","subtracted","multiplied","divided","toExact","serialize","wrapped","Price","baseCurrency","quoteCurrency","_len","arguments","length","args","Array","_key","result","quoteAmount","baseAmount","_ref","scalar","fraction","quote","currencyAmount","adjustedForDecimals","computePairAddress","factoryAddress","tokenA","tokenB","_ref2","token0","token1","getCreate2Address","keccak256","pack","MAX_SAFE_INTEGER","sqrt","value","greaterThanOrEqual","Math","floor","toNumber","z","x","minimum","lowest","undefined","i","LT","maximum","highest","GT","difference","a","b","Pair","currencyAmountA","currencyAmountB","currencyAmounts","liquidityToken","tokenAmounts","involvesToken","token","priceOf","token0Price","token1Price","reserveOf","reserve0","reserve1","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","tokenAmountA","tokenAmountB","liquidity","amount0","amount1","console","log","kLast","getLiquidityValue","feeOn","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","ONE_HUNDRED","toPercent","Percent","Route","pairs","input","output","every","pair","wrappedInput","path","_iterator","_createForOfIteratorHelperLoose","entries","_step","done","_step$value","currentInput","push","_midPrice","prices","_iterator2","_step2","_step2$value","reduced","slice","reduce","accumulator","currentValue","computePriceImpact","midPrice","quotedOutputAmount","priceImpact","sortedInsert","items","maxSize","comparator","isFull","lo","hi","mid","splice","pop","inputOutputComparator","tradeComparator","ioComp","route","Trade","amount","tradeType","EXACT_INPUT","_pair$getOutputAmount","_pair$getInputAmount","executionPrice","exactIn","amountIn","exactOut","amountOut","EXACT_OUTPUT","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","_temp","currentPairs","nextAmountIn","bestTrades","_ref$maxNumResults","maxNumResults","_ref$maxHops","maxHops","tokenOut","_pair$getOutputAmount2","isInsufficientInputAmountError","concat","pairsExcludingThisPair","worstExecutionPrice","bestTradeExactOut","currencyIn","currencyAmountOut","_temp2","nextAmountOut","_ref2$maxNumResults","_ref2$maxHops","tokenIn","_pair$getInputAmount2","isInsufficientReservesError","getSigner","library","account","connectUnchecked","getProviderOrSigner","rebase","from","to","toElastic","total","base","roundUp","elastic","validateSolidityTypeInstance","solidityType","toHex","ZERO_HEX","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","recipient","allowedSlippage","map","deadline","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName"],"mappings":"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"}